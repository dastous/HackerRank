#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the formingMagicSquare function below.
def formingMagicSquare(s):
    pre = [
            [[8, 1, 6], [3, 5, 7], [4, 9, 2]],
            [[6, 1, 8], [7, 5, 3], [2, 9, 4]],
            [[4, 9, 2], [3, 5, 7], [8, 1, 6]],
            [[2, 9, 4], [7, 5, 3], [6, 1, 8]], 
            [[8, 3, 4], [1, 5, 9], [6, 7, 2]],
            [[4, 3, 8], [9, 5, 1], [2, 7, 6]], 
            [[6, 7, 2], [1, 5, 9], [8, 3, 4]], 
            [[2, 7, 6], [9, 5, 1], [4, 3, 8]],
            ]
    #Find least cost
    s_total = sum(sum(x) for x in s)
    total_diff = [0]*len(pre)
    #print(total_diff)
    numb_diff = 0
    for i in range(0, len(pre)):
        for j in range(0, len(pre[i])):
            for k in range(0,3):
                if pre[i][j][k] != s[j][k]:
                    #print(i,j,k,abs(pre[i][j][k] - s[j][k]))
                    numb_diff += abs(pre[i][j][k] - s[j][k])
        total_diff[i] = numb_diff
        numb_diff = 0
    return min(total_diff)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = []

    for _ in range(3):
        s.append(list(map(int, input().rstrip().split())))

    result = formingMagicSquare(s)

    fptr.write(str(result) + '\n')

    fptr.close()
